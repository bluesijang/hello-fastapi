name: Build and Deploy Code

#on: [push, pull_request]
#on: push
on:
  push:
    branches: ["main"]

jobs:
  job1-build:
    environment:
      name: testing
    env:
      #DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRETE_KEY: ${{secrets.SECRETE_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
    
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v3 
      - name: Install Python version 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: test with pytest
        run: |
          pip install pytest
          pytest

      # 아래는 production 에서는 불필요 
      #   
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Build and push
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/simplewhale:latest
      #     cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:buildcache
      #     cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:buildcache,mode=max



      
      # 
      # pull github repo
      # install heroku cli
      # heroku login
      # add git remote for heroku
      # git push heroku main
      #
      #  => github market place to use built-in action

  job2-deploy:
    runs-on: ubuntu-latest
    needs: [job1-build]
    environment:
      name: production

    steps:
      - name: pulling git repo
        uses: actions/checkout@v3 
      - name: deploying to heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}} #Must be unique in Heroku
          heroku_email: ${{secrets.HEROKU_EMAIL}}


      # login to our ubuntu
      # cd /app/src
      # git pull
      # systemctl restart api
      #
      # => market place : ssh remote commands  by appleboy
      - name: deploy to ubuntu server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.UBUNTU_HOST }}
          username: ${{ secrets.UBUNTU_USERNAME }}
          password: ${{ secrets.UBUNTU_PASSWORD }}
          port: ${{ secrets.UBUNTU_PORT }}
          script: |
            cd app/src
            git pull
            sudo systemctl restart
